// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

//float3 startPoint;


    int resolution;
    float3 localUp;
    //float strength = 1;

    //int numberOfLayers = 1;
    //float baseRoughness = 1;
    //float roughness = 2;
    //float persistence = 0.5;
    //float3 centre = { 1, 1, 1 };

    //float minValue = 0.2;

int dataLength;
int chunksPerRow;
int reso = 8;
float sphereSize = 1;
float2 startXY;

struct WaterMeshData
{
    float3 vert;
    float dummy1;
};

RWStructuredBuffer<WaterMeshData> meshData;


#ifndef __noise_hlsl_
#define __noise_hlsl_

// hash based 3d value noise
// function taken from https://www.shadertoy.com/view/XslGRr
// Created by inigo quilez - iq/2013
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

// ported from GLSL to HLSL

float hash(float n)
{
    return frac(sin(n) * 43758.5453);
}

float noise(float3 x)
{
    // The noise function returns a value in the range -1.0f -> 1.0f
   
    float3 p = floor(x);
    float3 f = frac(x);

    f = f * f * (3.0 - 2.0 * f);
    float n = p.x + p.y * 57.0 + 113.0 * p.z;

    return lerp(lerp(lerp(hash(n + 0.0), hash(n + 1.0), f.x),
                   lerp(hash(n + 57.0), hash(n + 58.0), f.x), f.y),
               lerp(lerp(hash(n + 113.0), hash(n + 114.0), f.x),
                   lerp(hash(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);
}

#endif






[numthreads (8, 8, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    
    reso = 8;
    float3 axisA = float3(localUp.y, localUp.z, localUp.x);
    float3 axisB = cross(localUp, axisA);
    int i = id.x + id.y * (reso * resolution);
    float2 percent = float2((float) id.x / (reso * resolution - 1), (float) id.y / (reso * resolution - 1));
    percent /= (float) chunksPerRow;
    percent += startXY;
    float3 pointOnUnitCube = localUp + (percent.x - 0.5) * 2 * axisA + (percent.y - 0.5) * 2 * axisB;
    float3 pointOnUnitSphere = normalize(pointOnUnitCube) ;
   
    
    
    
    meshData[i].vert = pointOnUnitSphere * sphereSize ;
    
    
}
