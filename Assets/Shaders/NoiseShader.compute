// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

//float3 startPoint;


    int resolution;
    float3 localUp;
    //float strength = 1;

    //int numberOfLayers = 1;
    //float baseRoughness = 1;
    //float roughness = 2;
    //float persistence = 0.5;
    //float3 centre = { 1, 1, 1 };

    //float minValue = 0.2;

int dataLength;
int chunksPerRow;
int reso = 8;
float sphereSize = 1;
float2 startXY;


struct ComputeNoiseData
{
    int type;
    float strength;
    int numberOfLayers;
    float baseRoughness;
    float roughness;
    float persistence;
    float3 centre;
    float minValue;
    int useFirstLayerAsMask;
    
    //Dummy 
    float3 dummy1;
};
struct MeshData
{
    float3 vert;
    float2 uv;
    //Dummy
    float dummy1;
};
RWStructuredBuffer<ComputeNoiseData> noiseData;
RWStructuredBuffer<MeshData> meshData;

#ifndef __noise_hlsl_
#define __noise_hlsl_

// hash based 3d value noise
// function taken from https://www.shadertoy.com/view/XslGRr
// Created by inigo quilez - iq/2013
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

// ported from GLSL to HLSL

float hash(float n)
{
    return frac(sin(n) * 43758.5453);
}

float noise(float3 x)
{
    // The noise function returns a value in the range -1.0f -> 1.0f
   
    float3 p = floor(x);
    float3 f = frac(x);

    f = f * f * (3.0 - 2.0 * f);
    float n = p.x + p.y * 57.0 + 113.0 * p.z;

    return lerp(lerp(lerp(hash(n + 0.0), hash(n + 1.0), f.x),
                   lerp(hash(n + 57.0), hash(n + 58.0), f.x), f.y),
               lerp(lerp(hash(n + 113.0), hash(n + 114.0), f.x),
                   lerp(hash(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);
}

#endif

float simpleNoise(float3 pointOnSphere, ComputeNoiseData noiseData)
{
    float noiseValue = 0;
    float frequency = noiseData.baseRoughness;
    float amplitude = 1;
    
    for (int x = 0; x < noiseData.numberOfLayers; x++)
    {
        float v = noise(pointOnSphere * frequency + noiseData.centre);
        noiseValue += (v + 1) * 0.5 * amplitude;
        frequency *= noiseData.roughness;
        amplitude *= noiseData.persistence;
    }
    noiseValue = max(0, noiseValue - noiseData.minValue);
    noiseValue = noiseValue * noiseData.strength;
    return noiseValue;
}
float rigidNoise(float3 pointOnSphere, ComputeNoiseData noiseData)
{
    float noiseValue = 0;
    float frequency = noiseData.baseRoughness;
    float amplitude = 1;
    float weight = 1;
    
    for (int x = 0; x < noiseData.numberOfLayers; x++)
    {
        float v = 1 - abs(noise(pointOnSphere * frequency + noiseData.centre));
        v = pow(v, 2);
        
        
        
        noiseValue += v * amplitude;
        frequency *= noiseData.roughness;
        amplitude *= noiseData.persistence;
    }
    noiseValue = max(0, noiseValue - noiseData.minValue);
    noiseValue = noiseValue * noiseData.strength;
    return noiseValue;
}
float squaredNoise(float3 pointOnSphere, ComputeNoiseData noiseData)
{
    float noiseValue = 0;
    float frequency = noiseData.baseRoughness;
    float amplitude = 1;
    
    for (int x = 0; x < noiseData.numberOfLayers; x++)
    {
        float v = noise(pointOnSphere * frequency + noiseData.centre);
        v = clamp(v, -1, 0.6);
        noiseValue += (v + 1) * 0.5 * amplitude;
        frequency *= noiseData.roughness;
        amplitude *= noiseData.persistence;
    }
    
    noiseValue = max(0, noiseValue - noiseData.minValue);
    noiseValue = noiseValue * noiseData.strength;
    return noiseValue;
}
float craterNoise(float3 pointOnSphere, ComputeNoiseData noiseData)
{
    float noiseValue = 0;
    float frequency = noiseData.baseRoughness;
    float amplitude = 1;
    
    for (int x = 0; x < noiseData.numberOfLayers; x++)
    {
        float v = noise(pointOnSphere * frequency + noiseData.centre);
        v = clamp(v, 0, 1);
        float add = 0;
        if (v >= 0.5)
        {
            add = 0.5 - v;
        }
        
        noiseValue += (v + add) * amplitude;
        frequency *= noiseData.roughness;
        amplitude *= noiseData.persistence;
    }
    noiseValue = max(0, noiseValue - noiseData.minValue);
    noiseValue = noiseValue * noiseData.strength;
    return noiseValue;

}
float testNoise(float3 pointOnSphere, ComputeNoiseData noiseData)
{
    float noiseValue = 0;
    float frequency = noiseData.baseRoughness;
    float amplitude = 1;
    
    for (int x = 0; x < noiseData.numberOfLayers; x++)
    {
        float v = noise(pointOnSphere * frequency + noiseData.centre);
        noiseValue += (v + 1) * 0.5 * amplitude;
        frequency *= noiseData.roughness;
        amplitude *= noiseData.persistence;
    }
    noiseValue *= 500;
    noiseValue = floor(noiseValue);
    noiseValue *= 0.002;
    noiseValue = max(0, noiseValue - noiseData.minValue);
    noiseValue = noiseValue * noiseData.strength;
    return noiseValue;

}
float getNoiseValueAtPoint(float3 pointOnSphere, ComputeNoiseData noiseData, int type)
{
    
    if (type == 0)
    {
        return simpleNoise(pointOnSphere, noiseData);
    }
    else if (type == 1)
        return rigidNoise(pointOnSphere, noiseData);
    else if(type == 2)
        return squaredNoise(pointOnSphere, noiseData);
    else if(type == 3)
        return craterNoise(pointOnSphere, noiseData);
    else if(type == 4)
        return testNoise(pointOnSphere, noiseData);
    return 0;
}



[numthreads (8, 8, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    
    reso = 8;
    float3 axisA = float3(localUp.y, localUp.z, localUp.x);
    float3 axisB = cross(localUp, axisA);
    int i = id.x + id.y * (reso * resolution);
    float2 percent = float2((float) id.x / (reso * resolution - 1), (float) id.y / (reso * resolution - 1));
    percent /= (float) chunksPerRow;
    percent += startXY;
    float3 pointOnUnitCube = localUp + (percent.x - 0.5) * 2 * axisA + (percent.y - 0.5) * 2 * axisB;
    float3 pointOnUnitSphere = normalize(pointOnUnitCube) ;
    float firstElevation = 0;
    float elevation = 0;
    
    for (int j = 0; j < dataLength; j++)
    {
    
        float noiseValue = 0;

        
        noiseValue = getNoiseValueAtPoint(pointOnUnitSphere, noiseData[j], noiseData[j].type);
        if (j == 0)
        {
            firstElevation = noiseValue;
        }
        else if(firstElevation == 0 && noiseData[j].useFirstLayerAsMask ==1)
        {
            noiseValue = 0;
        }
        elevation += noiseValue;
    }
   
    meshData[i].vert = pointOnUnitSphere * sphereSize * (1 + elevation) ;
    meshData[i].uv = percent;
    
}
